name: Build Binary

on:
  push:
    tags:
      - 'v*'
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Run tests
      run: cargo test --all-features

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  build-musl:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: linux-musl-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            name: linux-musl-aarch64
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl tools
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-musl'
      run: |
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Configure cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-musl'
      run: |
        mkdir -p ~/.cargo
        echo '[target.aarch64-unknown-linux-musl]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Get version info
      id: version
      run: |
        VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "signalbench") | .version')
        ARCH=$(echo ${{ matrix.target }} | cut -d'-' -f1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "arch=$ARCH" >> $GITHUB_OUTPUT
        echo "target=${{ matrix.target }}" >> $GITHUB_OUTPUT
        echo "name=${{ matrix.name }}" >> $GITHUB_OUTPUT

    - name: Prepare binary for upload
      run: |
        mkdir -p release-artifacts
        cp target/${{ matrix.target }}/release/signalbench release-artifacts/signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}
        chmod +x release-artifacts/signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}
        path: release-artifacts/signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}
        retention-days: 30

  build-debian:
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: debian12-glibc2.36-x86_64
            container: debian:12
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: debian12-glibc2.36-aarch64
            container: debian:12
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Debian environment
      shell: bash
      run: |
        apt-get update
        apt-get install -y curl build-essential gcc pkg-config libssl-dev jq

    - name: Install Rust in Debian container
      shell: bash
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
        . ~/.cargo/env
        rustup target add ${{ matrix.target }}

    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      shell: bash
      run: |
        apt-get install -y gcc-aarch64-linux-gnu

    - name: Cache cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Configure cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      shell: bash
      run: |
        mkdir -p ~/.cargo
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

    - name: Build release binary
      shell: bash
      run: |
        . ~/.cargo/env
        cargo build --release --target ${{ matrix.target }}

    - name: Validate GLIBC compatibility
      shell: bash
      run: |
        . ~/.cargo/env
        echo "GLIBC version in container: $(ldd --version | head -n1)"
        echo "Required GLIBC symbols in binary:"
        strings target/${{ matrix.target }}/release/signalbench | grep -E 'GLIBC_[0-9]' | sort -u | tail -5

    - name: Get version info
      id: version
      shell: bash
      run: |
        . ~/.cargo/env
        VERSION=$(cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "signalbench") | .version')
        ARCH=$(echo ${{ matrix.target }} | cut -d'-' -f1)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "arch=$ARCH" >> $GITHUB_OUTPUT
        echo "target=${{ matrix.target }}" >> $GITHUB_OUTPUT
        echo "name=${{ matrix.name }}" >> $GITHUB_OUTPUT

    - name: Prepare binary for upload
      shell: bash
      run: |
        mkdir -p release-artifacts
        cp target/${{ matrix.target }}/release/signalbench release-artifacts/signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}
        chmod +x release-artifacts/signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}
        path: release-artifacts/signalbench-${{ steps.version.outputs.version }}-${{ steps.version.outputs.name }}
        retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-musl, build-debian]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          signalbench-*/signalbench-*
        generate_release_notes: true
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## SignalBench ${{ github.ref_name }} - Endpoint Telemetry Generator
          
          This release includes binaries for multiple architectures and distributions:
          
          **Recommended (Static builds, no GLIBC dependency):**
          - `linux-musl-x86_64`: Universal Linux 64-bit (static, works on any Linux distribution)
          - `linux-musl-aarch64`: Universal Linux ARM64 (static, works on any Linux distribution)
          
          **GLIBC builds (for specific distributions):**
          - `debian12-glibc2.36-x86_64`: Debian 12/Ubuntu 22.04+ 64-bit (requires GLIBC 2.36+)
          - `debian12-glibc2.36-aarch64`: Debian 12/Ubuntu 22.04+ ARM64 (requires GLIBC 2.36+)
          
          ### Installation
          
          **For maximum compatibility (recommended):**
          ```bash
          # Download universal static binary (works on any Linux distribution)
          wget https://github.com/gocortex/signalbench/releases/download/${{ github.ref_name }}/signalbench-${{ github.ref_name }}-linux-musl-x86_64
          chmod +x signalbench-${{ github.ref_name }}-linux-musl-x86_64
          sudo mv signalbench-${{ github.ref_name }}-linux-musl-x86_64 /usr/local/bin/signalbench
          ```
          
          **For Debian 12/Ubuntu 22.04+ systems:**
          ```bash
          # Download GLIBC 2.36+ compatible binary
          wget https://github.com/gocortex/signalbench/releases/download/${{ github.ref_name }}/signalbench-${{ github.ref_name }}-debian12-glibc2.36-x86_64
          chmod +x signalbench-${{ github.ref_name }}-debian12-glibc2.36-x86_64
          sudo mv signalbench-${{ github.ref_name }}-debian12-glibc2.36-x86_64 /usr/local/bin/signalbench
          ```
          
          ### Usage
          ```bash
          # List available techniques
          ./signalbench list
          
          # Run a technique in dry-run mode
          ./signalbench run T1082 --dry-run
          
          # Get help
          ./signalbench --help
          ```
          
          ### Technical Details
          - **Built with Rust:** High performance and memory safety
          - **MITRE ATT&CK Integration:** Real technique implementations
          - **Cross-platform:** Multiple Linux distributions supported
          - **Safe Testing:** Built-in cleanup and safety mechanisms